import heapq
INF=int(1e9)
n,m=map(int,input().split())
graph=[[] for _ in range(n+1)]
distance=[INF]*(n+1) #***
for i in range(m):
    a,b=map(int,input().split())
    graph[a].append((b,1))
    graph[b].append((a,1))
q=[]
heapq.heappush(q,(0,1))
distance[1]=0
while q:
    dist,now=heapq.heappop(q)
    if dist>distance[now]:
        continue
    for i in graph[now]:
        cost=dist+i[1]
        if cost<distance[i[0]]:
            distance[i[0]]=cost
            heapq.heappush(q,(cost,i[0]))
distance[0]=0
result=[]
for i in range(1,n+1):
    if distance[i]==max(distance):
        result.append(i)
print(result[0],max(distance),len(result))
